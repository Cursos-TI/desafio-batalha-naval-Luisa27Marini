#include <stdio.h>

#define TAMANHO_TABULEIRO 10
#define TAMANHO_NAVIO 3
#define AGUA 0
#define NAVIO 3

// Função para verificar se as posições estão dentro do tabuleiro
int dentro_dos_limites(int linha[], int coluna[]) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        if (linha[i] < 0 || linha[i] >= TAMANHO_TABULEIRO || coluna[i] < 0 || coluna[i] >= TAMANHO_TABULEIRO) {
            return 0; // Fora dos limites
        }
    }
    return 1; // Tudo certo
}

// Verifica se há sobreposição com navios já posicionados
int ha_sobreposicao(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha[], int coluna[]) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        if (tabuleiro[linha[i]][coluna[i]] == NAVIO) {
            return 1; // Já tem navio
        }
    }
    return 0;
}

// Posiciona o navio no tabuleiro com valor 3
void posicionar_navio(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha[], int coluna[]) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        tabuleiro[linha[i]][coluna[i]] = NAVIO;
    }
}

// Imprime o tabuleiro no console com 0s e 3s
void imprimir_tabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    printf("\nTabuleiro Batalha Naval (0 = água, 3 = navio):\n\n");
    printf("   ");
    for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
        printf("%d ", j);
    }
    printf("\n");

    printf("  +");
    for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
        printf("--");
    }
    printf("+\n");

    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        printf("%d |", i);
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("|\n");
    }

    printf("  +");
    for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
        printf("--");
    }
    printf("+\n");
}

int main() {
    // Inicializa o tabuleiro com água
    int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO] = {0};

    // Definindo coordenadas dos navios
    // Navio 1 - Horizontal a partir da posição (1, 1)
    int linha1[TAMANHO_NAVIO] = {1, 1, 1};
    int coluna1[TAMANHO_NAVIO] = {1, 2, 3};

    // Navio 2 - Vertical a partir da posição (5, 6)
    int linha2[TAMANHO_NAVIO] = {5, 6, 7};
    int coluna2[TAMANHO_NAVIO] = {6, 6, 6};

    // Navio 3 - Diagonal principal a partir da posição (3, 3): (3,3), (4,4), (5,5)
    int linha3[TAMANHO_NAVIO] = {3, 4, 5};
    int coluna3[TAMANHO_NAVIO] = {3, 4, 5};

    // Navio 4 - Diagonal secundária a partir da posição (0, 9): (0,9), (1,8), (2,7)
    int linha4[TAMANHO_NAVIO] = {0, 1, 2};
    int coluna4[TAMANHO_NAVIO] = {9, 8, 7};

    // Posicionamento com validações
    if (dentro_dos_limites(linha1, coluna1) && !ha_sobreposicao(tabuleiro, linha1, coluna1))
        posicionar_navio(tabuleiro, linha1, coluna1);

    if (dentro_dos_limites(linha2, coluna2) && !ha_sobreposicao(tabuleiro, linha2, coluna2))
        posicionar_navio(tabuleiro, linha2, coluna2);

    if (dentro_dos_limites(linha3, coluna3) && !ha_sobreposicao(tabuleiro, linha3, coluna3))
        posicionar_navio(tabuleiro, linha3, coluna3);

    if (dentro_dos_limites(linha4, coluna4) && !ha_sobreposicao(tabuleiro, linha4, coluna4))
        posicionar_navio(tabuleiro, linha4, coluna4);

    // Imprime o resultado final
    imprimir_tabuleiro(tabuleiro);

    return 0;
}
